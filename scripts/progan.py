import torch as th
import torchvision as tv
import pro_gan_pytorch.PRO_GAN as pg
from torch.utils.data import DataLoader, random_split
import torchvision.datasets as dset

# select the device to be used for training
from torchvision.transforms import transforms

device = th.device("cuda" if th.cuda.is_available() else "cpu")
data_path = "/run/media/alex/New Volume/malware_binary/MC-dataset-multiclass/image_multiclass"

def setup_data():
    """
    setup the CIFAR-10 dataset for training the CNN
    :param batch_size: batch_size for sgd
    :param num_workers: num_readers for data reading
    :param download: Boolean for whether to download the data
    :return: classes, trainloader, testloader => training and testing data loaders
    """
    # data setup:
    classes = ('backdoor', 'virus', 'rootkit', 'trojan', 'worm')

    transform = transforms.Compose([
        transforms.Resize((128, 128)),
        transforms.ToTensor(),
        transforms.Normalize(mean=(0.5, 0.5, 0.5), std=(0.5, 0.5, 0.5)),
    ])

    dataset = dset.ImageFolder(root=data_path, transform=transform)
    train_size = int(0.8 * len(dataset))
    test_size = len(dataset) - train_size
    malware_train, malware_val = random_split(dataset, [train_size, test_size])
    trainset = malware_train
    testset = malware_val


    return classes, trainset, testset




if __name__ == '__main__':

    # some parameters:
    depth = 4
    # hyper-parameters per depth (resolution)
    num_epochs = [10, 20, 20, 20]
    fade_ins = [50, 50, 50, 50]
    batch_sizes = [128, 128, 128, 128]
    latent_size = 128

    # get the data. Ignore the test data and their classes
    _, dataset, _ = setup_data()

    # ======================================================================
    # This line creates the PRO-GAN
    # ======================================================================
    pro_gan = pg.ConditionalProGAN(num_classes=5, depth=depth,
                                   latent_size=latent_size, device=device)
    # ======================================================================

    # ======================================================================
    # This line trains the PRO-GAN
    # ======================================================================
    pro_gan.train(
        dataset=dataset,
        epochs=num_epochs,
        fade_in_percentage=fade_ins,
        batch_sizes=batch_sizes
    )
    # ======================================================================