from typing import List
import argparse
import random
import string
from collections import OrderedDict
import torchvision.utils as vutils
import matplotlib.pyplot as plt
import yaml
import torch
from models import *


def load_pytorch_model(state_dict, config_path, *args, **kwargs):
    with open(config_path, 'r') as file:
        try:
            config = yaml.safe_load(file)
        except yaml.YAMLError as exc:
            print(exc)

    new_state_dict = OrderedDict()
    for k, v in state_dict.items():
        name = k
        if name.startswith('model.'):
            name = name.replace('model.', '')  # remove `model.`
        new_state_dict[name] = v

    model = vae_models[config['model_params']['name']](**config['model_params'])
    model.load_state_dict(new_state_dict)
    return model


def sample(num_samples, model, save_path, cvae=False):
    ngpu = 1
    device = torch.device("cuda:0" if (torch.cuda.is_available() and ngpu > 0) else "cpu")
    model = model.to(device)

    
    if num_samples > 100:
        for x in range(int(num_samples/100)+1):
            z = torch.randn(100, 128)

            if cvae:
                y = F.one_hot(torch.arange(0, 100) % 26, num_classes=26)
                y = y.to(torch.float)
                z = torch.cat([z, y], dim=1)

            z = z.to(device)
            samples = model.decode(z)
            for image in samples:
                random_name = ''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(10))
                vutils.save_image(image.cpu().data,
                f"{save_path}{random_name}.png",
                normalize=True)
                #plt.imshow(image.cpu().data.permute(1, 2, 0))
                #plt.savefig(save_path + random_name + ".png")
            del z
    else:
        z = torch.randn(num_samples, 128)

        if cvae:
            y = F.one_hot(torch.arange(0, 100) % 26, num_classes=26)
            y = y.to(torch.float)
            z = torch.cat([z, y], dim=1)

        z = z.to(device)
        samples = model.decode(z)
        for image in samples:
            random_name = ''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(10))
            vutils.save_image(image.cpu().data,
            f"{save_path}{random_name}.png",
            normalize=True)
            #plt.imshow(image.cpu().data.permute(1, 2, 0))
            #plt.savefig(save_path + random_name + ".png")
        del z

    print("done")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Generic runner for VAE models')
    parser.add_argument('--config', '-c',
                        help='path to the config file')

    parser.add_argument('--path', '-p',
                        help='path to a checkpoint')

    parser.add_argument('--save_path', '-s',
                        help='path to a checkpoint')

    parser.add_argument('--num_samples', '-n', type=int,
                        help='Number of samples')

    args = parser.parse_args()
    ckpt_dict = torch.load(args.path)
    model = load_pytorch_model(ckpt_dict['state_dict'], args.config)
    sample(args.num_samples, model, args.save_path, cvae=False)
